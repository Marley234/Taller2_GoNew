# -*- coding: utf-8 -*-
"""3_regresion_logistica.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12wH1cKPlLjmDsYcMj9ODv5EF1JBSBUhq

La regresión logística o Logistic Regression es un algoritmo de clasificación que se utiliza para predecir la probabilidad de una variable dependiente categórica. En la regresión logística, la variable dependiente es una variable binaria que contiene datos codificados como 1 – 0, sí – no, abierto – cerrado, etc.

El resultado o variable objetivo es de naturaleza dicotómica. Dicotómica significa que solo hay dos clases posibles. Por ejemplo, se puede utilizar para problemas de detección de cáncer o calcular la probabilidad de que ocurra un evento.

La regresión logística es uno de los algoritmos de Machine Learning más simples y más utilizados para la clasificación de dos clases. Es fácil de implementar y se puede usar como línea de base para cualquier problema de clasificación binaria. Describe y estima la relación entre una variable binaria dependiente y las variables independientes.
"""

import pandas as pd
datos = pd.read_csv("Social_Network_Ads.csv")

import seaborn as sb
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression

datos.head()

datos.describe()

import seaborn as sb
sb.countplot(x="Purchased", data=datos)

sb.countplot(x="Purchased", data=datos, hue="Gender")

datos.isna().sum()

sb.histplot(datos["Age"], bins=10, kde=True)
plt.show()

datos["Age"]

print("Edad promedio:", datos["Age"].mean())

datos["Age"] = datos["Age"].fillna(datos["Age"].mean())

print(datos.isna().sum())

datos["Age"]

datos.isna().sum()

datos = datos.drop(["User ID"], axis=1)

dummies_gender = pd.get_dummies(datos["Gender"], drop_first=True)
datos = datos.join(dummies_gender).drop(["Gender"], axis=1)

sb.countplot(x="Purchased", data=datos)
plt.show()

datos.head()

sb.heatmap(datos.corr(), annot=True, cmap="YlGnBu")
plt.show()

X = datos.drop(["Purchased"], axis=1)
y = datos["Purchased"]

X_ent, X_pru, y_ent, y_pru = train_test_split(X, y, test_size=0.2, random_state=42)

modelo = LogisticRegression(max_iter=1000)
modelo.fit(X_ent, y_ent)

predicciones = modelo.predict(X_pru)

X.head()

nueva_persona = [[35, 80000, 1]]  # Edad, EstimatedSalary, Gender (1 = Male, 0 = Female)
prediccion = modelo.predict(nueva_persona)

if prediccion[0] == 1:
    print("Compraste el producto")
else:
    print("No compraste el producto")